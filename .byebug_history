c
if user && user.password_digest == params[:password_digest]
user = User.find_by(email: params[:email], password_digest: params[:password_digest])
c
token = encode_user_data({ user_data: user.id })
if user && user.password_digest == params[:password_digest]
user = User.find_by(email: params[:email])
c
token = encode_user_data({ user_data: user.id })
user = User.find_by(email: params[:email], password_digest: params[:password_digest])
c
token = encode_user_data({ user_data: user.id })
user = User.find_by(email: params[:email])
c
@account = @user.accounts.create(account_params)
@user = User.find(params[:user_id])
c
@account = @user.accounts.create(account_params)
@user = User.find(params[:user_id])
c
@user = User.find(params[:user_id])
c
@account.save
@account = @user.accounts.new(account_params)
@account = @user.accounts.create(account_params)
@user = User.find(params[:user_id])
c
@account = @user.accounts.create(account_params)
@user = User.find(params[:user_id])
c
@user = User.find(params[:user_id])
c
@account = @user.accounts.build(account_params)
@user = User.find(params[:user_id])
c
@account = @user.accounts.build(account_params)
@user = User.find(params[:user_id])
c
@account.errors.full_messages
@account.save
@account = @user.accounts.new(account_params)
@account = @user.accounts.new
@account = @user.account.new
current_user == @user
@user = User.find(params[:user_id])
c
decode_user_data
c
data = JWT.decode token, SECRET[
data = JWT.decode token, SECRET[1]
data = JWT.decode token, SECRET
data = JWT.decode
data = JWT.decode token
data = JWT.decode token, SECRET
data = JWT.decode token, SECRET, true
data
data = JWT.decode token, SECRET, true, { algorithm: "HS256" }
JWT.decode token, SECRET, true, { algorithm: "HS256" }
c
@token
token
decode_user_data[0]['user_id']
c
decode_user_data[0]
user_id = decode_user_data[0]['user_id']
c
user_id = decode_user_data[0]['user_id']
c
user_id = decode_token[0]['user_id']
c
@current_user = User.find(@token.id)
c
@current_user.errors.full_messages
@current_user = User.find(@token.id)
c
@current_user ||= User.find(@token.id) if @token.present?
c
decode_data = decode_user_data(request.headers["token"])
c
token = encode_user_data({ user_data: user.id })
user = User.find_by(email: params[:email])
c
if user && user.password == params[:password]
password
user = User.find_by(email: params[:email])
c
user = user_data
user_data = decode_data[0]["user_data"] unless !decode_data
decode_data = decode_user_data(request.headers["token"])
c
user = User.find_by(email: params[:email])
c
@user = User.find(params[:id])
c
@current_user
@cuurent_user
params
token
@token
@token.id
c
@user = User.find(params[:id])
c
@current_user ||= User.find(@token.id) if @token.present?
c
token = encode_user_data({ user_data: user.id })
user = User.find_by(email: params[:email])
c
user
user && user.password == params[:password]
user = User.find_by(email: params[:email])
c
user_data = decode_data[0]["user_data"] unless !decode_data
decode_data = decode_user_data(request.headers["token"])
c
a
user = User.find_by(email: params[:email])
c
a
c
user = User.find_by(email: params[:email])
c
user_data = decode_data[0]["user_data"] unless !decode_data
decode_data = decode_user_data(request.headers["token"])
c
user.save
user = User.new(username: params[:username],email: params[:email], password_digest: params[:password_digest])
c
user.errors.full_messages
user.save
User.save
user = User.new(username: params[:username],email: params[:email], password_digest: params[:password_digest])
c
token = encode_user_data({ user_data: user.id })
user = User.new(username: params[:username],email: params[:email], password_digest: params[:password_digest])
c
user = User.new(username: params[:username],email: params[:email], password: params[:password])
c
decode_data = decode_user_data(request.headers["token"])
c
user_data = decode_data[0]["user_data"] unless !decode_data
decode_data = decode_user_data(request.headers["token"])
c
user_data = decode_data[0]["user_data"] unless !decode_data
decode_data = decode_user_data(request.headers["token"])
c
user = user_data
user_data = decode_data[0]["user_data"] unless !decode_data
decode_data = decode_user_data(request.headers["token"])
