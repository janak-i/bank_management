c
@user = @account.user
 @transaction = Transaction.new
@account = Account.find(params[:account_id])
c
@account.user
Transaction.new
@account = Account.find(params[:account_id])
[:account_id]
c
(params[:account_id])
[:account_id]
[:account_id])
[:account_id
c
params[:account_id]
c
@account.delete
@user = User.find(params[:user_id])
params[:user_id]
@account = Account.find(params[:id])
params[:id]
c
@user = @account.user
@account.user
@account = Account.find(params[:id])
c
@account.user
@account = Account.find(params[:id])
params[:id]
c
@account = Account.find(params[:id])
c
@account.delete
@account = Account.find(params[:id])
@account = Account.find(params[:id]
params[:id]
c
@account.delete
@user = User.find(params[:user_id])
@account = Account.find(params[:id])
(params[:id])
c
@account = Account.find(params[:id])
params[:id]
c
@account = Account.find(params[:id])
c
@account.delete
@user = User.find(params[:user_id])
@account = Account.find(params[:id])
params[:id]
c
@accounts = @user.accounts
@user = User.find(params[:user_id])
c
@user = User.find(params[:user_id])
c
@account.save
@account = @user.accounts.create(account_params)
@user = User.find(params[:user_id])
c
User.find(params[:user_id])
c
@user.errors.full_messages
@user
params[:user_id
accounts = @user.accounts
@user = User.find(params[:user_id])
c
@account.save
@account = @user.accounts.create(account_params)
account_params
@user = User.find(params[:user_id])
c
@accounts = @user.accounts
user = User.find(params[:user_id])
c
token = encode_user_data({ user_data: user.id })
user.save
user = User.new(email: params[:email], password_digest: params[:password_digest])
params[:password_digest]
c
user.save
user = User.new(email: params[:email], password_digest: params[:password_digest])
params[:password_digest]
c
token = encode_user_data({ user_data: user.id })
user.save
user.password_digest = 123456
user.errors.full_messages
user.save
user = User.new(email: params[:email], password_digest: params[:password_digest])
c
token = encode_user_data({ user_data: user.id })
user = User.new(email: params[:email], password_digest: params[:password_digest])
c
token
token = JWT.encode payload, SECRET, "HS256"
c
token = encode_user_data({ user_data: user.id })
user = User.new(bank_id: params[:bank_id], first_name: params[:first_name], last_name: params[:last_name], street_address: params[:street_address],city: params[:city], state: params[:state], zip_code: params[:zip_code],age: params[:age], username: params[:username],email: params[:email], password_digest: params[:password_digest])
c
token = encode_user_data({ user_data: user.id })
user && user.password_digest == params[:password_digest]
params[:password_digest]
params[:email]
user.password_digest == params[:password_digest]
user = User.find_by(email: params[:email], password_digest: params[:password_digest])
User.find_by(email: params[:email], password_digest: params[:password_digest])
user = User.find_by(email: params[:email], password_digest: params[:password_digest])
c
user = User.find_by(email: params[:email], password_digest: params[:password_digest])
c
user.password_digest == params[:password_digest]
user.password_digest
params[:password_digest]
user = User.find_by(email: params[:email])
c
user.password_digest == params[:password_digest]
user = User.find_by(email: params[:email])
token = encode_user_data({ user_data: user.id })
c
user.password_digest == params[:password_digest]
token
token = encode_user_data({ user_data: user.id })
user_data
user_data:
user.id
token = encode_user_data
user.password_digest == params[:password_digest]
user = User.find_by(email: params[:email])
params[:password_digest]
user.password_digest
user
user = User.find_by(email: params[:email])
c
params[:password_digest]
c
token = encode_user_data({ user_data: user.id })
params[:password_digest]
user = User.find_by(email: params[:email])
c
params[:password]
user.password
user = User.find_by(email: params[:email])
c
token = encode_user_data({ user_data: user.id })
user = User.find_by(email: params[:email])
c
token = encode_user_data({ user_data: user.id }
token = encode_user_data({ user_data: user.id })
user = User.find_by(email: params[:email], password_digest: params[:password_digest])
c
if user && user.password_digest == params[:password_digest]
user = User.find_by(email: params[:email], password_digest: params[:password_digest])
c
token = encode_user_data({ user_data: user.id })
if user && user.password_digest == params[:password_digest]
user = User.find_by(email: params[:email])
c
token = encode_user_data({ user_data: user.id })
user = User.find_by(email: params[:email], password_digest: params[:password_digest])
c
token = encode_user_data({ user_data: user.id })
user = User.find_by(email: params[:email])
c
@account = @user.accounts.create(account_params)
@user = User.find(params[:user_id])
c
@account = @user.accounts.create(account_params)
@user = User.find(params[:user_id])
c
@user = User.find(params[:user_id])
c
@account.save
@account = @user.accounts.new(account_params)
@account = @user.accounts.create(account_params)
@user = User.find(params[:user_id])
c
@account = @user.accounts.create(account_params)
@user = User.find(params[:user_id])
c
@user = User.find(params[:user_id])
c
@account = @user.accounts.build(account_params)
@user = User.find(params[:user_id])
c
@account = @user.accounts.build(account_params)
@user = User.find(params[:user_id])
c
@account.errors.full_messages
@account.save
@account = @user.accounts.new(account_params)
@account = @user.accounts.new
@account = @user.account.new
current_user == @user
@user = User.find(params[:user_id])
c
decode_user_data
c
data = JWT.decode token, SECRET[
data = JWT.decode token, SECRET[1]
data = JWT.decode token, SECRET
data = JWT.decode
data = JWT.decode token
data = JWT.decode token, SECRET
data = JWT.decode token, SECRET, true
data
data = JWT.decode token, SECRET, true, { algorithm: "HS256" }
JWT.decode token, SECRET, true, { algorithm: "HS256" }
c
@token
token
decode_user_data[0]['user_id']
c
decode_user_data[0]
user_id = decode_user_data[0]['user_id']
c
user_id = decode_user_data[0]['user_id']
c
user_id = decode_token[0]['user_id']
c
@current_user = User.find(@token.id)
c
@current_user.errors.full_messages
@current_user = User.find(@token.id)
c
@current_user ||= User.find(@token.id) if @token.present?
c
decode_data = decode_user_data(request.headers["token"])
c
token = encode_user_data({ user_data: user.id })
user = User.find_by(email: params[:email])
c
if user && user.password == params[:password]
password
user = User.find_by(email: params[:email])
c
user = user_data
user_data = decode_data[0]["user_data"] unless !decode_data
decode_data = decode_user_data(request.headers["token"])
c
user = User.find_by(email: params[:email])
c
@user = User.find(params[:id])
c
@current_user
@cuurent_user
params
token
@token
@token.id
c
@user = User.find(params[:id])
c
